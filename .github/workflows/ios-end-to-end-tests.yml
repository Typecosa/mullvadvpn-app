---
name: iOS end-to-end tests
env:
  TEST_DEVICE_UDID: 00008130-0019181022F3803A
  REPO_DIR: iOSWorkingDirectory
permissions:
  contents: read
  issues: write
  pull-requests: write
on:
  workflow_call:
    inputs:
      arg_tests_json_key:
        type: string
        required: false
      commit_hash:
        type: string
        required: false
  workflow_dispatch:
    inputs:
      user_supplied_test_name:
        description: Only run test case/suite
        required: false

jobs:
  set-up-outputs-directory:
    name: Set up outputs directory
    runs-on:
      - self-hosted
      - macOS
      - ios-test
    outputs:
      job_outputs_directory: ${{ steps.set-up-job-outputs-directory.outputs.job_outputs_directory }}
    steps:
      - name: Set up job outputs directory
        id: set-up-job-outputs-directory
        run: |
          job_outputs_directory="$HOME/workflow-outputs/job-outputs-${{ github.run_id }}"
          echo "job_outputs_directory=$job_outputs_directory" >> "$GITHUB_OUTPUT"
          mkdir -p "$job_outputs_directory"
        shell: bash

  define-test-suites-matrix:
    name: Define test suites matrix
    runs-on:
      - self-hosted
      - macOS
      - ios-test
    needs: set-up-outputs-directory
    steps:
      - name: Test runs to JSON
        id: test-runs-to-json
        run: |
          if [ -n "${{ inputs.arg_tests_json_key }}" ]; then
            echo "Using calling workflow supplied test suites JSON key: ${{ inputs.arg_tests_json_key }}"
            sync
            test_suites_json=$(jq -r --compact-output '.tests."${{ inputs.arg_tests_json_key }}"' tests.json)
            echo "test_suites_json=$test_suites_json" >> $GITHUB_ENV
          elif [ -n "${{ inputs.user_supplied_test_name }}" ]; then
            echo "Using user supplied test name: ${{ inputs.user_supplied_test_name }}"
            test_suites_json="['${{ inputs.user_supplied_test_name }}']"
            echo "test_suites_json=$test_suites_json" >> $GITHUB_ENV
          else
            echo "Tests not specified, will fallback to running nightly(all) tests scope"
            test_suites_json=$(jq -r --compact-output '.tests.nightly' tests.json)
            echo "test_suites_json=$test_suites_json" >> $GITHUB_ENV
          fi

          echo "Test suites/cases to run: $test_suites_json"
        working-directory: ios/MullvadVPNUITests
    outputs:
      test_suites_json: ${{ env.test_suites_json }}

  build:
    name: Build for end-to-end testing
    runs-on:
      - self-hosted
      - macOS
      - ios-test
    needs: set-up-outputs-directory
    timeout-minutes: 20
    steps:
      - name: Set commit hash or default to github.ref
        id: set-commit-hash
        run: |
          if [ -z "${{ inputs.commit_hash }}" ]; then
            echo "COMMIT_HASH=${{ github.ref }}" >> $GITHUB_ENV
          else
            echo "COMMIT_HASH=${{ inputs.commit_hash }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true
          ref: ${{ env.COMMIT_HASH }}
          path: ${{ env.REPO_DIR }}

      - name: Configure Rust
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          override: true
          target: aarch64-apple-ios

      - name: Build iOS end to end tests action
        uses: ./.github/actions/build-ios-e2e-tests
        with:
          test_name: ${{ github.event.inputs.user_supplied_test_name }}
          ios_device_pin_code: ${{ secrets.IOS_DEVICE_PIN_CODE }}
          test_device_identifier_uuid: ${{ secrets.IOS_TEST_DEVICE_IDENTIFIER_UUID }}
          has_time_account_number: ${{ secrets.IOS_HAS_TIME_ACCOUNT_NUMBER_PRODUCTION }}
          no_time_account_number: ${{ secrets.IOS_NO_TIME_ACCOUNT_NUMBER_PRODUCTION }}
          test_device_udid: ${{ env.TEST_DEVICE_UDID }}
          partner_api_token: ${{ secrets.STAGEMOLE_PARTNER_AUTH }}
          outputs_path: ${{ needs.set-up-outputs-directory.outputs.job_outputs_directory }}
          base_directory: ${{ env.REPO_DIR }}

      - name: Debug print job output directory
        run: |
          echo "Job output directory: ${{
          needs.set-up-outputs-directory.outputs.job_outputs_directory }}"
        shell: bash

      - name: Copy build output and project to output directory
        run: |
          mkdir -p "$JOB_OUTPUTS_DIRECTORY/derived-data"
          cp -R ios/derived-data "$JOB_OUTPUTS_DIRECTORY"
          cp -R ${{ env.REPO_ }}"
